import 'dart:convert';

import 'package:dio/dio.dart';
import 'package:fly_cargo/config/talker_service.dart';

class TalkerDioInterceptor extends Interceptor {
  final TalkerService _talker = TalkerService.instance;

  @override
  void onRequest(RequestOptions options, RequestInterceptorHandler handler) {
    _talker.logInfo('üöÄ HTTP REQUEST');
    _talker.logInfo('Method: ${options.method}');
    _talker.logInfo('URL: ${options.uri}');
    if (options.headers.isNotEmpty) {
      _talker.logInfo('Headers: ${options.headers}');
    }
    if (options.data != null) {
      _logFormattedData('Request Data', options.data);
    }
    if (options.queryParameters.isNotEmpty) {
      _talker.logInfo('Query Parameters: ${options.queryParameters}');
    }
    super.onRequest(options, handler);
  }

  @override
  void onResponse(Response response, ResponseInterceptorHandler handler) {
    _talker.logInfo('‚úÖ HTTP RESPONSE');
    _talker.logInfo('Status Code: ${response.statusCode}');
    _talker.logInfo('URL: ${response.requestOptions.uri}');
    if (response.headers.map.isNotEmpty) {
      _talker.logInfo('Response Headers: ${response.headers.map}');
    }
    if (response.data != null) {
      _logFormattedData('Response Data', response.data);
    }
    super.onResponse(response, handler);
  }

  @override
  void onError(DioException err, ErrorInterceptorHandler handler) {
    _talker.logError('‚ùå HTTP ERROR');
    _talker.logError('Method: ${err.requestOptions.method}');
    _talker.logError('URL: ${err.requestOptions.uri}');
    _talker.logError('Status Code: ${err.response?.statusCode}');
    _talker.logError('Error: ${err.message}');
    if (err.response?.data != null) {
      _logFormattedData('Response Data', err.response?.data);
    }
    super.onError(err, handler);
  }

  void _logFormattedData(String label, dynamic data) {
    try {
      String formattedData;
      if (data is String) {
        // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
        try {
          final jsonData = jsonDecode(data);
          formattedData = const JsonEncoder.withIndent('  ').convert(jsonData);
        } catch (e) {
          // –ï—Å–ª–∏ –Ω–µ JSON, –≤—ã–≤–æ–¥–∏–º –∫–∞–∫ –µ—Å—Ç—å
          formattedData = data;
        }
      } else if (data is Map || data is List) {
        // –ï—Å–ª–∏ —ç—Ç–æ Map –∏–ª–∏ List, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ JSON
        formattedData = const JsonEncoder.withIndent('  ').convert(data);
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –≤—ã–≤–æ–¥–∏–º –∫–∞–∫ –µ—Å—Ç—å
        formattedData = data.toString();
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Å—å JSON –≤ –æ–¥–Ω–æ–º –±–ª–æ–∫–µ
      _talker.logInfo('$label:\n$formattedData');
    } catch (e) {
      // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤—ã–≤–æ–¥–∏–º –∫–∞–∫ –µ—Å—Ç—å
      _talker.logInfo('$label: ${data.toString()}');
    }
  }
}
